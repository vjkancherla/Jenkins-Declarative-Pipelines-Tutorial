<<<<<<<<<<<<<<
PARAMETERS
>>>>>>>>>>>>>>
	- dynamically pass values to variables
	
	Types of Parameters:
		- String
		- Text : multi-line string
		- Boolean
		- Choice: a drop-down list
		- Password: a masked string
		- File: a raw file
		
	EXAMPLE:
	====
	pipeline {
		agent any

		parameters {
			string(name: 'STRING_PARAM', defaultValue: 'Default String', description: 'Enter a string parameter')
			text(name: 'TEXT_PARAM', defaultValue: 'Default Text', description: 'Enter a text parameter')
			password(name: 'PASSWORD_PARAM', defaultValue: 'DefaultPassword', description: 'Enter a password parameter')
			choice(name: 'CHOICE_PARAM', choices: ['Option 1', 'Option 2', 'Option 3'], description: 'Select a choice')
			file(name: 'FILE_PARAM', description: 'Upload a file')
			booleanParam(name: 'BOOLEAN_PARAM', defaultValue: true, description: 'Enable or disable a feature')
		}

		stages {
			stage('Parameterized Build') {
				steps {
					script {
						echo "String Parameter: ${params.STRING_PARAM}"
						echo "Text Parameter: ${params.TEXT_PARAM}"
						echo "Password Parameter: ${params.PASSWORD_PARAM}"
						echo "Choice Parameter: ${params.CHOICE_PARAM}"
						echo "Boolean Parameter: ${params.BOOLEAN_PARAM}"

						// Accessing file parameter
						def fileContent = readFile params.FILE_PARAM
						echo "File Parameter Content:\n${fileContent}"
					}
				}
			}
		}
	}
	====


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
DYNAMIC PARAMETERS. GENERATE DOWNSTREAM PARAMS BASED ON A PREVIOUS PARAM SELECTION
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- https://www.youtube.com/watch?v=bYi4IXep2mk&list=PLLYW3zEOaqlKmPyhjIrT4RmmQDQYYrTjk&index=6
- Declarative pipelines do not support defining parameters with the activeChoiceParam block directly 
	- To do so, see this: https://stackoverflow.com/questions/43410204/active-choices-reactive-reference-parameter-in-jenkins-pipeline
- Instead, you should use the Active Choices plugin in a freestyle or scripted pipeline.


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
IF/ELSE CONDITIONS WITH PARAMETERS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EXAMPLE:
=====
	pipeline {
		agent any

		parameters {
			string(name: 'ACTION', defaultValue: 'build', description: 'Specify action: build or deploy')
			booleanParam(name: 'DEBUG', defaultValue: false, description: 'Enable debugging')
		}

		stages {
			stage('Check Action') {
				steps {
					script {
						def action = params.ACTION.toLowerCase()
						def debug = params.DEBUG

						echo "Action: ${action}"
						echo "Debug Mode: ${debug}"

						if (action == 'build') {
							echo 'Building the application...'
							// Add build steps here
						} else if (action == 'deploy') {
							echo 'Deploying the application...'
							// Add deployment steps here
						} else {
							error("Invalid action specified: ${action}. Please use 'build' or 'deploy'.")
						}

						if (debug) {
							echo 'Debugging enabled. Additional debugging steps can be added here.'
						}
					}
				}
			}
		}
	}
=====

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
ABORTING A BUILD BASED ON PARAMETERS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EXAMPLE:
====
pipeline {
	agent any

	parameters {
		choice(name: 'DRY_RUN', choices: ['Yes', 'No'], description: 'Do you need a DRY-RUN?')
		string(name: 'ACTION', defaultValue: 'build', description: 'Specify action: build or deploy')
		booleanParam(name: 'DEBUG', defaultValue: false, description: 'Enable debugging')
	}

	stages {
		stage('Check Action') {
			steps {
				script {
					if ("${params.DRY_RUN}" == "Yes") {
						currentBuild.result = 'aborted'
						//echo "DRY-RUN completed."
						error("DRY-RUN completed.")
					}
				}
			}
		}
	}
}
====
