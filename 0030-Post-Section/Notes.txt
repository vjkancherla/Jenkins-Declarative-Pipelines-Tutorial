<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
POST SECTION AND POST BLOCKS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- In Jenkins Pipeline, the "post" section is used to define actions or steps that should be taken after the 
    main build pipeline has completed, regardless of whether the build was successful or not.

- It allows you to specify post-build actions such as notifications, clean-up tasks, or deployment steps, among others.

	EXAMPLE:
		=====
		pipeline {
			agent any 
			stages {

			}

			post {
				success {
					// Actions to be performed when the build is successful
					echo 'Build succeeded!'
				}
				failure {
					// Actions to be performed when the build fails
					echo 'Build failed!'
				}
				always {
					// Actions to be performed regardless of success or failure
					echo 'Cleaning up...'
				}
			}
		}
		=====

POST BLOCKS
-----------------
- Here's a list of the blocks that can be defined in the "post" section:
NOTE: the blocks defined in the "post" section are executed in the below order.

- 'always': This block contains actions that will always be executed, regardless of whether the build was successful or not. 
            It's typically used for cleanup tasks or actions that should occur under all circumstances.

- 'success': Actions defined in this block are executed only if the main stages of the pipeline were successful (i.e., all previous stages passed without errors).

- 'failure': Actions defined in this block are executed only if the main stages of the pipeline failed (i.e., at least one previous stage encountered an error).

- 'unstable': This block allows you to specify actions that should be taken if the build results in an "unstable" state. 
              In Jenkins, builds can be marked as "unstable" when certain conditions are met, such as 
			  failing test cases but not necessarily failing the entire build.

- 'changed': The "changed" block allows you to define actions that should be taken if the current build's status differs 
             from the previous build's status. For example, if the previous build was successful, but the current build failed, 
			 you can define specific actions here.

- 'fixed': This block is used to specify actions that should be taken if the current build is a "fixed" build, meaning it 
           successfully resolved a previous failure. For example, if the last build failed but the current build passed, you 
		   can define actions in the "fixed" block.

- 'aborted': Actions defined in this block are executed if the pipeline was manually aborted by a user.

- 'changedAsOf': This block allows you to define actions based on changes in the build result compared to a specific build number. 
                 For example, you can specify actions to be taken if the build status changed since build #5.

- Custom Conditions: You can define custom conditions using expressions in the "post" section. For example, you can use 
                     the script block to execute a Groovy script that determines whether specific actions should be taken based 
					 on custom logic.

	EXAMPLE POST CUSTOM CONDITON: 
		======
		post {
			script {
				// Custom condition using Groovy script
				if (currentBuild.resultIsWorseThan('SUCCESS')) {
					// Take some custom action
				}
			}
		}
		======