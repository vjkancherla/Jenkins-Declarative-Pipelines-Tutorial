<<<<<<<<<<<<<<<<<<<<<
OPTIONS BLOCK
>>>>>>>>>>>>>>>>>>>>>
The "options" block is a child of the "Pipleline" block.

Example:
====
pipeline {
	agent any

	options {
		retry (2)
	}
}
====

Some important directives to use with Options block:
	- retry
	- buildDiscarder
	- disableConcurrentBuilds
	- Timeout
	- Timestamps


- buildDiscarder DIRECTIVE
	-  define how and when build records or artifacts are discarded for a particular Jenkins job or pipeline
	
	=====
	pipeline {
		agent any

		options {
			buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
		}

		stages {
			// Define your pipeline stages here
		}
	}

	=====

	numToKeepStr specifies that the latest 10 builds should be kept for the build records, and older builds should be discarded.
	artifactNumToKeepStr specifies that the latest 5 builds' artifacts (e.g., files generated during the build) should be kept.
	
	
- disableConcurrentBuilds DIRECTIVE
	- The disableConcurrentBuilds directive in Jenkins Declarative Pipelines is used to prevent multiple 
	  concurrent executions of the entire job or a specific stage.

	=====
	Prevent concurrent executions of the entire job 

	pipeline {
		options {
			disableConcurrentBuilds()
		}
	}
	=====

	=====
	Prevent concurrent executions of a stage
	stages {
        stage('Non-Concurrent Stage') {
            disableConcurrentBuilds() // Disable concurrent executions of this stage

            steps {
                // Your stage steps here
            }
        }
        // Other stages...
    }
	=====

	- timeout DIRECTIVE
		- The timeout directive is used to set a time limit for the execution of the entire job, a specific stage or a block of code within a stage

		======
		Set timeout for entire job

		pipeline {
			options {
				timeout(time: 30, unit: 'MINUTES')
			}
		}
		======

		======
		Set timeout for a Stage

		stage('Build and Test') {
			steps {
				timeout(time: 30, unit: 'MINUTES') {
					sh 'build-and-test-command'
				}
			}
		}
		=======

	- timestamp Directive
		- display the timestamp for when that code or step starts and finishes executing

		=====
		pipeline {
			options {
				timestamps ()
			}
		}
		=====
